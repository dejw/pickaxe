pickaxe(1) -- Uses given paths to generate a test from *.txt files
==================================================================

## SYNOPSIS

`pickaxe` [<options>] <path> [, <path> ...]  
`drill` [<options>] <path> [, <path> ...]

## DESCRIPTION

Pickaxe provides a simple way to load, solve and rate tests (bundle of questions)
written in simple text format.

By default `pickaxe` loads any text file given as command line argument,
and searches for any <txt> files when given path is a directory.

`pickaxe` provides bunch of commands during the test. Type `?` and hit `enter`
for help.

At the end of the test, `pickaxe` will create `answers.log` file with answers
given by user during the test. Example of a log file:

    123: a b
    456: c d e

## OPTIONS

  * `-e`, `--extension`=<extension>:
    Change the <extension> for files loaded automatically from directories 
    (default is <txt>)
    
  * `-s`, `--sorted`:
    Stop shuffling the questions
    
  * `--select`=<number>:
    Select certain number of questions
    
  * `--strict`:
    Quit after first syntax error in test file
    
  * `--full-test`:
    Do not reveal correct answers until the end of test
    
  * `--syntax-check`:
    Check syntax only - do not run test

  * `--version`:
    Show pickaxe version and exit
    
## TEST FILE SYNTAX

Tests (bundle of `questions`) that load `pickaxe` are stored in text file with
simple format.

Questions are separated by one or more blank lines. Each question
has two parts: `content` and `answers`.

### Questions

Question `content` is defined by lines until the first `answer leading line`. 
First line of a content must starts with a number (question index) followed by
optional `.` (dot). Regular expression for questions are defined as follows:

     ^\s*(\d+)\.?\s*(.+)$

Question index should be unique because it is used in `answers.log` file. 
Duplicated question index may be confusing for someone reading the log.

### Answers

`Answers` are defined by remaining lines. Answer may span across many lines until
new `answers leading line` is found.

`Answer leading line` starts with `(index)` and optional `>>` which denotes the 
answer is correct. Answer index is simply a letter indicating that answer.
Regular expression for leading lines is defines as follows:

    ^\s*(>+)?\s*(\?+)?\s*\(?(\w)\)\s*(.+)$
    
Addidional answer lines must match following regular expression (simple should 
start with a letter preceded by optional whitespaces):

    ^\s*(\w+)

### Formatting

If answer or question spans across lines, additional lines will be joined with
a white space. If You would like to break line in particular place, write `\n`.

Example:

    355. What kind of error You appears in this piece of C++ code:
    \n[1] goto label;
    \n[2] Person* person = new Person();
    \n[3] label: // ...
    a) syntactical
    >> b) semantical
    c) lexical
    d) there is no error

### Comments

Lines that start with `#` or `//` are skipped (but does not treated as blank line).

### Example

Example test file:

    // C-like comments are allowed
    1. To be or not to be?
    That is also the question (content).
    (a) To be.
    (b) Not to be.
    >> (c) I do not know.
    
    # Ruby-like comments are also allowed
    1 Number listed here is recommended to be unique (note the dot is optional)
    (a) To be.
    (b) Not to be
        that is still answer b)
      and the number of whitespaces does not matter
    >> (c) I do not know.
	
## SOURCE CODE

You can grab [source code](https://github.com/dejw/pickaxe) with git by typing:

    git clone git://github.com/dejw/pickaxe

Please create an [issue](https://github.com/dejw/pickaxe/issues) when You found a bug. Thanks!

## AUTHOR

Dawid Fatyga

