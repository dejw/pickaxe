#!/usr/bin/env ruby

require 'optparse'

$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + "/../lib"))

require 'pickaxe'

# TODO:
# 	time limit
# 	syntax check only
# 	default -> warns + ignore, options for exception on syntax error ;-)

options = {}
OptionParser.new do |opts|
  opts.banner = <<END_OF_BANNER
Usage: 
  pick path [, path ...]
  pickaxe path [, path ...]
  
Uses given paths (files or directories) to generate a test from *.txt files.
END_OF_BANNER
  
  opts.separator ""
  opts.on("-e", "--ext [EXTENSION]", "Use files with given EXTENSION (default 'txt')") do |extension|
    options[:extension] = extension
  end
  
	opts.on("-s", "--sorted", "Do not shuffle questions") do |v|
		options[:sorted] = true
	end
	
	opts.on("--select [NUMBER]", "Select certain number of questions") do |v|
		options[:select] = Integer(v)
	end
	
	opts.on("-b", "--builtin", "Runs builtin tests") do |v|
		options[:builtin] = true
	end
	
	opts.on("--list-builtin", "Lists builtin test names") do |v|
		options[:list_builtin] = true
	end
  
  opts.on_tail("--version", "Show version") do
    puts "pickaxe version #{Pickaxe::VERSION}"
    exit
  end
  
	opts.on_tail("-h", "--help", "Show this message") do
		puts opts
		exit
	end
end.parse!

if options[:list_builtin]
	puts(Dir.glob(File.dirname(__FILE__) + "/../tests/*.#{options[:extension] || "txt"}").collect do |file|
		File.basename(file)
	end.join(" "))
	exit
end

paths = if options[:builtin]
	File.expand_path(File.dirname(__FILE__) + "/../tests")
else
	ARGV
end
	
begin
	Pickaxe::Main.new(paths, options)
rescue Pickaxe::PickaxeError => e
	$stderr.puts(("! " + e.message).color(:red))
	exit(e.status_code)
end
